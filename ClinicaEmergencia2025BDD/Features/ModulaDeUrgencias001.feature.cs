// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ClinicaEmergencia2025BDD.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Modulo de Urgencias")]
    public partial class ModuloDeUrgenciasFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Modulo de Urgencias", "Como enferera\r\nQuiero porder registrar las admisiones de los pacientes a emergenc" +
                "ias\r\nPara determinar que pacientes tienen mayor prioridad de atención", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ModulaDeUrgencias001.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 7
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "Nombre",
                        "Apellido"});
            table1.AddRow(new string[] {
                        "Ana",
                        "Perez"});
#line 8
 await testRunner.GivenAsync("que la siguiente enfermera esta registrada:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ingreso de paciente a la lista de espera de emergencias")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        public async System.Threading.Tasks.Task IngresoDePacienteALaListaDeEsperaDeEmergencias()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso de paciente a la lista de espera de emergencias", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Nombre",
                            "Apellido",
                            "Obra Social"});
                table2.AddRow(new string[] {
                            "20-11111111-3",
                            "Juan",
                            "Gomez",
                            "Galeno"});
                table2.AddRow(new string[] {
                            "27-22222222-6",
                            "Maria",
                            "Lopez",
                            "MedLife"});
                table2.AddRow(new string[] {
                            "20-33333333-8",
                            "Carlos",
                            "Sanchez",
                            "OSDE"});
#line 14
 await testRunner.GivenAsync("que estan registrados los siguientes pacientes:", ((string)(null)), table2, "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Informe",
                            "Nivel de Emergencia",
                            "Temperatura",
                            "Frecuencia Cardíaca",
                            "Frecuencia Respiratoria",
                            "Tensión Arterial"});
                table3.AddRow(new string[] {
                            "20-11111111-3",
                            "Dolor de cabeza severo",
                            "3",
                            "37.5",
                            "80",
                            "18",
                            "120/80"});
                table3.AddRow(new string[] {
                            "27-22222222-6",
                            "Fractura en brazo",
                            "2",
                            "36.8",
                            "75",
                            "16",
                            "118/76"});
                table3.AddRow(new string[] {
                            "20-33333333-8",
                            "Dificultad para respirar",
                            "1",
                            "38.2",
                            "95",
                            "22",
                            "130/85"});
#line 19
 await testRunner.WhenAsync("ingresan a urgencias los siguientes pacientes:", ((string)(null)), table3, "When ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Cuil"});
                table4.AddRow(new string[] {
                            "27-22222222-6"});
                table4.AddRow(new string[] {
                            "20-11111111-3"});
                table4.AddRow(new string[] {
                            "20-33333333-8"});
#line 24
 await testRunner.ThenAsync("los pacientes deben ser añadidos a la cola de atencion ordenados por cuil de la s" +
                        "iguiente manera:", ((string)(null)), table4, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ingreso de paciente, no registrado, a la lista de espera de emergencias")]
        [NUnit.Framework.CategoryAttribute("tag2")]
        public async System.Threading.Tasks.Task IngresoDePacienteNoRegistradoALaListaDeEsperaDeEmergencias()
        {
            string[] tagsOfScenario = new string[] {
                    "tag2"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso de paciente, no registrado, a la lista de espera de emergencias", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Nombre",
                            "Apellido",
                            "Obra Social"});
                table5.AddRow(new string[] {
                            "20-11111111-3",
                            "Juan",
                            "Gomez",
                            "Galeno"});
                table5.AddRow(new string[] {
                            "27-22222222-6",
                            "Maria",
                            "Lopez",
                            "MedLife"});
                table5.AddRow(new string[] {
                            "20-33333333-8",
                            "Carlos",
                            "Sanchez",
                            "OSDE"});
#line 32
 await testRunner.GivenAsync("que estan registrados los siguientes pacientes:", ((string)(null)), table5, "Given ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Informe",
                            "Nivel de Emergencia",
                            "Temperatura",
                            "Frecuencia Cardíaca",
                            "Frecuencia Respiratoria",
                            "Tensión Arterial"});
                table6.AddRow(new string[] {
                            "20-44444444-3",
                            "Dolor de cabeza severo",
                            "3",
                            "37.5",
                            "80",
                            "18",
                            "120/80"});
#line 37
 await testRunner.WhenAsync("ingresan a urgencias los siguientes pacientes:", ((string)(null)), table6, "When ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Cuil"});
                table7.AddRow(new string[] {
                            "20-44444444-3"});
#line 40
 await testRunner.ThenAsync("se muestra el mensaje de error \"Paciente no registrado. No se puede ingresar a ur" +
                        "gencias.\"", ((string)(null)), table7, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ingreso de paciente, pero algunos de los datos fue omitidot")]
        [NUnit.Framework.CategoryAttribute("tag3")]
        public async System.Threading.Tasks.Task IngresoDePacientePeroAlgunosDeLosDatosFueOmitidot()
        {
            string[] tagsOfScenario = new string[] {
                    "tag3"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso de paciente, pero algunos de los datos fue omitidot", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Nombre",
                            "Apellido",
                            "Obra Social"});
                table8.AddRow(new string[] {
                            "20-11111111-3",
                            "Juan",
                            "Gomez",
                            "Galeno"});
                table8.AddRow(new string[] {
                            "27-22222222-6",
                            "Maria",
                            "Lopez",
                            "MedLife"});
                table8.AddRow(new string[] {
                            "20-33333333-8",
                            "Carlos",
                            "Sanchez",
                            "OSDE"});
#line 46
 await testRunner.GivenAsync("que estan registrados los siguientes pacientes:", ((string)(null)), table8, "Given ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Informe",
                            "Nivel de Emergencia",
                            "Temperatura",
                            "Frecuencia Cardíaca",
                            "Frecuencia Respiratoria",
                            "Tensión Arterial"});
                table9.AddRow(new string[] {
                            "20-33333333-8",
                            "Dolor de cabeza severo",
                            "",
                            "37.5",
                            "80",
                            "18",
                            "120/80"});
#line 51
 await testRunner.WhenAsync("ingresan a urgencias los siguientes pacientes:", ((string)(null)), table9, "When ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Informe",
                            "Nivel de Emergencia",
                            "Temperatura",
                            "Frecuencia Cardíaca",
                            "Frecuencia Respiratoria",
                            "Tensión Arterial"});
                table10.AddRow(new string[] {
                            "20-33333333-8",
                            "Dolor de cabeza severo",
                            "",
                            "37.5",
                            "80",
                            "18",
                            "120/80"});
#line 54
 await testRunner.ThenAsync("se muestra el mensaje de error \"Faltan agregar algunos datos.\".", ((string)(null)), table10, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ingreso de la frecuencia cardíaca y respiratoria en valores negaitivos")]
        [NUnit.Framework.CategoryAttribute("tag4")]
        public async System.Threading.Tasks.Task IngresoDeLaFrecuenciaCardiacaYRespiratoriaEnValoresNegaitivos()
        {
            string[] tagsOfScenario = new string[] {
                    "tag4"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Ingreso de la frecuencia cardíaca y respiratoria en valores negaitivos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Nombre",
                            "Apellido",
                            "Obra Social"});
                table11.AddRow(new string[] {
                            "20-11111111-3",
                            "Juan",
                            "Gomez",
                            "Galeno"});
                table11.AddRow(new string[] {
                            "27-22222222-6",
                            "Maria",
                            "Lopez",
                            "MedLife"});
                table11.AddRow(new string[] {
                            "20-33333333-8",
                            "Carlos",
                            "Sanchez",
                            "OSDE"});
#line 60
 await testRunner.GivenAsync("que estan registrados los siguientes pacientes:", ((string)(null)), table11, "Given ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Informe",
                            "Nivel de Emergencia",
                            "Temperatura",
                            "Frecuencia Cardíaca",
                            "Frecuencia Respiratoria",
                            "Tensión Arterial"});
                table12.AddRow(new string[] {
                            "20-33333333-8",
                            "Dolor de cabeza severo",
                            "Urgencia menor",
                            "37.5",
                            "80",
                            "18",
                            "120/80"});
#line 65
 await testRunner.WhenAsync("ingresan a urgencias los siguientes pacientes:", ((string)(null)), table12, "When ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Cuil",
                            "Informe",
                            "Nivel de Emergencia",
                            "Temperatura",
                            "Frecuencia Cardíaca",
                            "Frecuencia Respiratoria",
                            "Tensión Arterial"});
                table13.AddRow(new string[] {
                            "20-33333333-8",
                            "Dolor de cabeza severo",
                            "Urgencia menor",
                            "37.5",
                            "-80",
                            "-18",
                            "120/80"});
#line 68
 await testRunner.ThenAsync("se muestra el mensaje de error \"Los datos cargados, correspondientes para los de " +
                        "frecuencia, no pueden ser negativos.\".", ((string)(null)), table13, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
